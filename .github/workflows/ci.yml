on: [push]

jobs:
  test:
    name: Test
    runs-on: ${{matrix.os || 'ubuntu-latest'}}
    strategy:
      matrix:
        target:
          [
            x86_64-unknown-linux-musl,
            x86_64-apple-darwin,
            x86_64-pc-windows-gnu,
          ]
        include:
          - target: x86_64-apple-darwin
            os: macos-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}

      - name: Run check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --target=${{matrix.target}}
          use-cross: ${{!matrix.os}}

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --target=${{matrix.target}}
          use-cross: ${{!matrix.os}}

  build:
    name: Build
    needs: [test]
    runs-on: ${{matrix.os || 'ubuntu-latest'}}
    strategy:
      matrix:
        target: [
            aarch64-apple-darwin,
            # i686-apple-darwin,
            x86_64-apple-darwin,

            i686-pc-windows-msvc,
            x86_64-pc-windows-gnu,

            aarch64-unknown-linux-musl,
            i686-unknown-linux-musl,
            x86_64-unknown-linux-musl,
            armv7-unknown-linux-musleabihf,
            arm-unknown-linux-musleabi,
          ]
        include:
          - target: i686-pc-windows-msvc
            os: windows-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          # - target: i686-apple-darwin
          #   os: macos-latest
          - target: x86_64-apple-darwin
            os: macos-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}

      # Code from https://github.com/prisma/prisma-engines/blob/master/.github/workflows/build-apple-silicon.yml#L42-L56
      - if: matrix.target == 'aarch64-apple-darwin'
        run: xcodebuild -showsdks

      # Remove Xcode Command Line Tools so old version can not be used in build via https://github.com/prisma/prisma/issues/5245#issuecomment-864356168
      - if: matrix.target == 'aarch64-apple-darwin'
        run: sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;

      # Activate newest available Xcode
      - if: matrix.target == 'aarch64-apple-darwin'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      # Build with fancy params via https://github.com/shepmaster/rust/blob/silicon/silicon/README.md
      - if: matrix.target == 'aarch64-apple-darwin'
        run: |
          SDKROOT=$(xcrun -sdk macosx11.1 --show-sdk-path)
          MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.1 --show-sdk-platform-version)

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=${{ matrix.target }}
          use-cross: ${{!matrix.os}}
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/lsp-translations
            target/${{ matrix.target }}/release/lsp-translations.exe
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        id: download
        with:
          path: target/release
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            {{steps.download.outputs.download-path}}/lsp-translations
            {{steps.download.outputs.download-path}}/lsp-translations.exe
